apiVersion: apps/v1
kind: Deployment
metadata:
  name: django-web-deployment
  labels:
    app: django-web
spec:
  replicas: 3 # As per requirement: minimum 3 instances
  selector:
    matchLabels:
      app: django-web
  template:
    metadata:
      labels:
        app: django-web
    spec:
      containers:
      - name: djangobackend
        image: remote_monitoring_kube:latest # Use the image you built
        imagePullPolicy: IfNotPresent # <--- ADD/UPDATE THIS LINE
        ports:
        - containerPort: 8000
        env:
        - name: CELERY_BROKER_URL
          value: "redis://redis-service:6379/0" # Reference the internal Redis service
        envFrom: # Use envFrom for Secrets/ConfigMaps
        - secretRef:
            name: django-secrets # Reference the Secret for SECRET_KEY
        command: ["gunicorn"]
        args: ["--bind", "0.0.0.0:8000", "--workers", "3", "--threads", "2", "djangobackend.wsgi:application"]
        # Add liveness and readiness probes for robust deployments
        livenessProbe:
          httpGet:
            path: /health # Assuming you have a /health endpoint in Django
            port: 8000
          initialDelaySeconds: 15
          periodSeconds: 20
        readinessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 5
          periodSeconds: 10
      # If your Django app needs a database (e.g., PostgreSQL), you'd define that here too.
      # For simplicity, we are focusing on the components mentioned in the docker-compose.
---
apiVersion: v1
kind: Service
metadata:
  name: django-web-service
  labels:
    app: django-web
spec:
  selector:
    app: django-web
  ports:
    - protocol: TCP
      port: 80 # External port for the load balancer
      targetPort: 8000 # Internal port of the Django container
  type: LoadBalancer # Expose externally via a LoadBalancer (simulated by Minikube)